[versions]
retrofit = "2.9.0"
okhttpLoggingInterceptor = "3.9.0"
appcompat = "1.3.0"
coreKtx = "1.7.0"
constraintlayout = "2.0.4"
paging = "3.0.0-alpha01"
timber = "4.7.1"
kotlin = "1.6.10"
koin = "2.1.5"
work = "2.2.0"
room = "2.3.0-alpha01"
cardview = "1.0.0"
recyclerview = "1.1.0"
fragment = "1.3.0-alpha06"
anko = "0.10.8"
swiperefreshlayout = "1.0.0"
junit = "4.13.2"
junitExt = "1.1.3"
espressoCore = "3.4.0"
jDatabinding = "1.0.1"
coil = "0.11.0"
hit = "2.28-alpha"
hitViewModule = "1.0.0-alpha01"
appStartup = "1.0.0-alpha01"
dataStore = "1.0.0-alpha06"
javalite = "3.8.0"
material = "1.4.0"
lifecycle = "2.5.0-alpha03"
navigation = "2.3.5"
compose = "1.0.5"
composeActivity = "1.3.1"
glide = "4.11.0"
arch = "2.1.0"
unpeek = "7.2.0-beta1"
longan = "1.0.5"
kotlinCoroutinesCore = "1.3.7"
kotlinCoroutinesAndrid = "1.3.6"
annotation = "1.1.0"
media = "1.0.1"


[libraries]
# ------ android start ---- #
junit = { module = "junit:junit", version.ref = "junit" }
androidTestJunit = { module = "androidx.test.ext:junit", version.ref = "junitExt" }
# espresso 单元测试/集成测试
androidTestEspressoCore = { module = "androidx.test.espresso:espresso-core", version.ref = "espressoCore" }
# ------ android end ---- #

# ------ kotlin start ---- #
# Core KTX 模块为属于 Android 框架的通用库提供扩展程序。
androidCoreKtx = { module = "androidx.core:core-ktx", version.ref = "coreKtx" }

#  如果您的目标是 JDK 7 或 JDK 8，则可以使用 Kotlin 标准库的扩展版本。它们包含新 JDK 版本中添加的 API 的附加扩展功能。根据您的 JDK 版本，使用 kotlin-stdlib-jdk7 或 kotlin-stdlib-jdk8 代替 kotlin-stdlib
#  查看和ktl的对应关系 https://mvnrepository.com/artifact/org.jetbrains.kotlin
#  $kotlin_version 说明和kotlin版本对应
stdlibJdk7 = { module = "org.jetbrains.kotlin:kotlin-stdlib-jdk7", version.ref = "kotlin" }
stdlibJdk8 = { module = "org.jetbrains.kotlin:kotlin-stdlib-jdk8", version.ref = "kotlin" }
coroutinesCore = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "kotlinCoroutinesCore" }
coroutinesAndroid = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-android", version.ref = "kotlinCoroutinesAndrid" }
kotlinTestJunit = { module = "org.jetbrains.kotlin:kotlin-test-junit", version.ref = "kotlin" }
kotlinGradlePlugin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }
# ------ kotlin end ---- #


# ------ Jetpack start ---- #
# paging
pagingRuntime = { module = "androidx.paging:paging-runtime", version.ref = "paging" }

# WorkManager
workRuntime = { module = "androidx.work:work-runtime", version.ref = "work" }
workTesting = { module = "androidx.work:work-testing", version.ref = "work" }

# startup
appStartup = { module = "androidx.startup:startup-runtime", version.ref = "appStartup" }

# lifecycle
lifecycleRuntimeKtx = { module = "androidx.lifecycle:lifecycle-runtime-ktx", version.ref = "lifecycle" }
lifecycleCommonJava8 = { module = "androidx.lifecycle:lifecycle-common-java8", version.ref = "lifecycle" }
lifecycleService = { module = "androidx.lifecycle:lifecycle-service", version.ref = "lifecycle" }
lifecycleProcess = { module = "androidx.lifecycle:lifecycle-process", version.ref = "lifecycle" }
lifecycleViewmodelSavedstate = { module = "androidx.lifecycle:lifecycle-viewmodel-savedstate", version.ref = "lifecycle" }
lifecycleLivedataKtx = { module = "androidx.lifecycle:lifecycle-livedata-ktx", version.ref = "lifecycle" }
lifecycleViewmodelKtx = { module = "androidx.lifecycle:lifecycle-viewmodel-ktx", version.ref = "lifecycle" }
lifecycleViewmodelCompose = { module = "androidx.lifecycle:lifecycle-viewmodel-compose", version.ref = "lifecycle" }
lifecycleReactivestreamsKtx = { module = "androidx.lifecycle:lifecycle-reactivestreams-ktx", version.ref = "lifecycle" }
# 可选 Test helpers for LiveData
archCoreTesting = { module = "androidx.arch.core:core-testing", version.ref = "arch" }

# UnPeek-LiveData 十分接近我理想中的 LiveData 设计，也即它分别提供 “粘性的” 和 “非粘性的” 设计
livedataUnpeek = { module = "com.kunminx.arch:unpeek-livedata", version.ref = "unpeek" }

# navigation
navFragmentKtx = { module = "androidx.navigation:navigation-fragment-ktx", version.ref = "navigation" }
navUiKtx = { module = "androidx.navigation:navigation-ui-ktx", version.ref = "navigation" }
navigationDynamicFeaturesFragment = { module = "androidx.navigation:navigation-dynamic-features-fragment", version.ref = "navigation" }
navigationTesting = { module = "androidx.navigation:navigation-testing", version.ref = "navigation" }

# datastore
dataStorePreferences = { module = "androidx.datastore:datastore-preferences", version.ref = "dataStore" }
dataStoreProto = { module = "androidx.datastore:datastore-core", version.ref = "dataStore" }

# Room
roomRuntime = { module = "androidx.room:room-runtime", version.ref = "room" }
roomCompiler = { module = "androidx.room:room-compiler", version.ref = "room" }
roomKtx = { module = "androidx.room:room-ktx", version.ref = "room" }
roomRxjava2 = { module = "androidx.room:room-rxjava2", version.ref = "room" }
roomTesting = { module = "androidx.room:room-testing", version.ref = "room" }

# Databinding Viewbinding
jDatabinding = { module = "com.hi-dhl:jdatabinding", version.ref = "jDatabinding" }

# compose
composeMaterial = { module = "androidx.compose.material:material", version.ref = "compose" }
composeActivity = { module = "androidx.activity:activity-compose", version.ref = "composeActivity" }
composeAnimation = { module = "androidx.compose.animation:animation", version.ref = "compose" }
composeUiTooling = { module = "androidx.compose.ui:ui-tooling", version.ref = "compose" }
composeUiTestJunit = { module = "androidx.compose.ui:ui-test-junit4", version.ref = "compose" }
composeThemeAdapter = { module = "com.google.android.material:compose-theme-adapter", version.ref = "compose" }
# ------ Jetpack end ---- #

# ------ ui start ---- #
# appcompat 替代 support 兼容库
appcompat = { module = "androidx.appcompat:appcompat", version.ref = "appcompat" }

cardview = { module = "androidx.cardview:cardview", version.ref = "cardview" }
recyclerview = { module = "androidx.recyclerview:recyclerview", version.ref = "recyclerview" }
swiperefreshlayout = { module = "androidx.swiperefreshlayout:swiperefreshlayout", version.ref = "swiperefreshlayout" }
constraintlayout = { module = "androidx.constraintlayout:constraintlayout", version.ref = "constraintlayout" }

# fragment
runtimeFragment = { module = "androidx.fragment:fragment", version.ref = "fragment" }
runtimeKtx = { module = "androidx.fragment:fragment-ktx", version.ref = "fragment" }
fragmentTesting = { module = "androidx.fragment:fragment-testing", version.ref = "fragment" }
# ------ ui end ---- #

# ------ material start ---- #
material = { module = "com.google.android.material:material", version.ref = "material" }
# ------ material end ---- #

# ------ glide start ---- #
glide = { module = "com.github.bumptech.glide:glide", version.ref = "glide" }
glideCompiler = { module = "com.github.bumptech.glide:compiler", version.ref = "glide" }
# ------ glide end ---- #

# ------ hilt dagger start ---- #
hiltDaggerRuntime = { module = "com.google.dagger:hilt-android", version.ref = "hit" }
hiltDaggerAndroidCompiler = { module = "com.google.dagger:hilt-android-compiler", version.ref = "hit" }
hiltDaggerViewModule = { module = "androidx.hilt:hilt-lifecycle-viewmodel", version.ref = "hitViewModule" }
hiltDaggerCompiler = { module = "androidx.hilt:hilt-compiler", version.ref = "hitViewModule" }
# ------ hilt dagger end ---- #

# protobuf 序列化
protobufJavalite = { module = "com.google.protobuf:protobuf-javalite", version.ref = "javalite" }

# koltin协程图片加载库Coil
coil = { module = "io.coil-kt:coil", version.ref = "coil" }


# ------ anko start ---- #
anko = { module = "org.jetbrains.anko:anko", version.ref = "anko" }
ankoCommon = { module = "org.jetbrains.anko:anko-common", version.ref = "anko" }
ankoSqlite = { module = "org.jetbrains.anko:anko-sqlite", version.ref = "anko" }
ankoCoroutines = { module = "org.jetbrains.anko:anko-coroutines", version.ref = "anko" }
ankoDesign = { module = "org.jetbrains.anko:anko-design", version.ref = "anko" }
# ------ anko end ---- #

# ------ retrofit start ---- #
retrofit = { module = "com.squareup.retrofit2:retrofit", version.ref = "retrofit" }
retrofitGson = { module = "com.squareup.retrofit2:converter-gson", version.ref = "retrofit" }
retrofitMock = { module = "com.squareup.retrofit2:retrofit-mock", version.ref = "retrofit" }
retrofitUrlmanager = "me.jessyan:retrofit-url-manager:1.4.0"
retrofitLoggingInterceptor = { module = "com.squareup.okhttp3:logging-interceptor", version.ref = "okhttpLoggingInterceptor" }
# 一种 CookieJar
persistentCookieJar = "com.github.franmontiel:PersistentCookieJar:1.0.1"
# ------ retrofit end ---- #

# timber 日志
timber = { module = "com.jakewharton.timber:timber", version.ref = "timber" }

# 龙眼是Kotlin utils的集合，它使Android应用程序开发更快、更容易。它使您的代码简洁易读。
# https://github.com/DylanCaiCoding/Longan
longan = { module = "com.github.DylanCaiCoding.Longan:longan", version.ref = "longan" }
longanDesign = { module = "com.github.DylanCaiCoding.Longan:longan-design", version.ref = "longan" }

# widget
magicIndicator = "com.github.hackware1993:MagicIndicator:1.7.0"

[bundles]

[plugins]